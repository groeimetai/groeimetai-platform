#!/bin/bash

# Generate deployment report after blockchain deployment

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}Generating deployment report...${NC}"

# Create reports directory
mkdir -p ./reports

# Generate report
REPORT_FILE="./reports/deployment-report-$(date +%Y%m%d-%H%M%S).md"

cat > "$REPORT_FILE" << EOF
# GroeiMetAI Blockchain Deployment Report

Generated on: $(date)

## Deployment Summary

### Contracts Deployed
EOF

# Add deployment info from deployment files
if [ -d "./deployments" ]; then
    for file in ./deployments/*.json; do
        if [ -f "$file" ]; then
            echo "" >> "$REPORT_FILE"
            echo "#### $(basename "$file" .json)" >> "$REPORT_FILE"
            echo '```json' >> "$REPORT_FILE"
            cat "$file" >> "$REPORT_FILE"
            echo '```' >> "$REPORT_FILE"
        fi
    done
fi

# Add environment configuration
cat >> "$REPORT_FILE" << EOF

## Environment Configuration

### Contract Addresses
EOF

# Extract contract addresses from .env
if [ -f ".env" ]; then
    grep "NEXT_PUBLIC_CERTIFICATE_CONTRACT" .env >> "$REPORT_FILE" || true
fi

# Add gas usage if available
cat >> "$REPORT_FILE" << EOF

## Gas Usage Report

Check \`gas-report.txt\` for detailed gas usage analysis.

## Verification Status

- [ ] Contracts verified on Polygonscan
- [ ] IPFS gateway configured
- [ ] Minter roles assigned
- [ ] Admin roles configured

## Post-Deployment Checklist

- [ ] Update frontend environment variables
- [ ] Test certificate minting on testnet
- [ ] Configure monitoring alerts
- [ ] Backup deployment artifacts
- [ ] Update documentation

## Notes

Add any deployment-specific notes here.

---
Report generated by deployment script
EOF

echo -e "${GREEN}✓ Deployment report generated: $REPORT_FILE${NC}"

# Also create a JSON summary
JSON_REPORT="./reports/deployment-summary.json"
cat > "$JSON_REPORT" << EOF
{
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "deployments": [
EOF

# Add deployment summaries
first=true
if [ -d "./deployments" ]; then
    for file in ./deployments/*.json; do
        if [ -f "$file" ]; then
            if [ "$first" = false ]; then
                echo "," >> "$JSON_REPORT"
            fi
            first=false
            cat "$file" | jq -c '.' >> "$JSON_REPORT"
        fi
    done
fi

cat >> "$JSON_REPORT" << EOF
  ],
  "status": "completed"
}
EOF

echo -e "${GREEN}✓ JSON summary generated: $JSON_REPORT${NC}"