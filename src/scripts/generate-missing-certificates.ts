#!/usr/bin/env node
/**
 * Script to generate certificates for completed courses that don't have certificates yet
 * This is useful for retroactively creating certificates for users who completed courses
 * before the certificate system was implemented or when assessments weren't required
 */

import { initializeApp, cert, getApps } from 'firebase-admin/app'
import { getFirestore } from 'firebase-admin/firestore'
import { getAuth } from 'firebase-admin/auth'
import { CertificateService } from '../services/certificateService'
import dotenv from 'dotenv'

// Load environment variables
dotenv.config({ path: '.env.local' })

// Initialize Firebase Admin
const adminConfig = {
  credential: cert({
    projectId: process.env.FIREBASE_ADMIN_PROJECT_ID!,
    clientEmail: process.env.FIREBASE_ADMIN_CLIENT_EMAIL!,
    privateKey: process.env.FIREBASE_ADMIN_PRIVATE_KEY?.replace(/\\n/g, '\n')!,
  }),
}

const app = getApps().length > 0 ? getApps()[0] : initializeApp(adminConfig)
const db = getFirestore(app)
const auth = getAuth(app)

async function generateMissingCertificates() {
  console.log('🔍 Searching for completed courses without certificates...')
  
  try {
    // Get all enrollments that are completed
    const enrollmentsSnapshot = await db
      .collection('enrollments')
      .where('completedAt', '!=', null)
      .get()
    
    console.log(`Found ${enrollmentsSnapshot.size} completed enrollments`)
    
    let certificatesGenerated = 0
    let certificatesSkipped = 0
    let errors = 0
    
    for (const doc of enrollmentsSnapshot.docs) {
      const enrollment = doc.data()
      const userId = enrollment.userId
      const courseId = enrollment.courseId
      
      try {
        // Check if certificate already exists
        const existingCertQuery = await db
          .collection('certificates')
          .where('userId', '==', userId)
          .where('courseId', '==', courseId)
          .where('isValid', '==', true)
          .get()
        
        if (!existingCertQuery.empty) {
          console.log(`✓ Certificate already exists for user ${userId} - course ${courseId}`)
          certificatesSkipped++
          continue
        }
        
        // Get user data
        const userRecord = await auth.getUser(userId)
        const userDoc = await db.collection('users').doc(userId).get()
        const userData = userDoc.data()
        
        if (!userData) {
          console.warn(`⚠️  No user data found for ${userId}`)
          errors++
          continue
        }
        
        // Get course data
        const courseDoc = await db.collection('courses').doc(courseId).get()
        const courseData = courseDoc.data()
        
        if (!courseData) {
          console.warn(`⚠️  No course data found for ${courseId}`)
          errors++
          continue
        }
        
        console.log(`🎯 Generating certificate for ${userData.displayName} - ${courseData.title}`)
        
        // Calculate completion time
        const completionTime = enrollment.completedAt && enrollment.enrolledAt
          ? Math.floor((enrollment.completedAt.toDate().getTime() - enrollment.enrolledAt.toDate().getTime()) / (1000 * 60 * 60))
          : 24 // Default to 24 hours if dates are missing
        
        // Generate certificate
        const certificateData = {
          userId,
          courseId,
          title: `Certificate of Completion - ${courseData.title}`,
          studentName: userData.displayName || userRecord.displayName || 'Student',
          courseName: courseData.title,
          instructorName: courseData.instructor?.displayName || 'GroeiMetAI Instructor',
          completionDate: enrollment.completedAt.toDate(),
          qrCode: '', // Will be generated by service
          certificateUrl: '', // Will be generated by service
          isValid: true,
          createdAt: new Date(),
          certificateNumber: `CERT-RETRO-${Date.now()}`,
          verificationCode: '',
          qrCodeData: '',
          grade: 'Completed',
          score: 100,
          completionTime,
          achievements: ['Course Completed', 'All Lessons Finished'],
          linkedinShareUrl: '',
        }
        
        // Save certificate
        await db.collection('certificates').add(certificateData)
        
        console.log(`✅ Certificate generated successfully!`)
        certificatesGenerated++
        
      } catch (error) {
        console.error(`❌ Error processing enrollment ${doc.id}:`, error)
        errors++
      }
    }
    
    console.log('\n📊 Summary:')
    console.log(`✅ Certificates generated: ${certificatesGenerated}`)
    console.log(`⏭️  Certificates skipped (already exist): ${certificatesSkipped}`)
    console.log(`❌ Errors: ${errors}`)
    console.log(`📋 Total processed: ${enrollmentsSnapshot.size}`)
    
  } catch (error) {
    console.error('Fatal error:', error)
    process.exit(1)
  }
}

// Run the script
generateMissingCertificates()
  .then(() => {
    console.log('\n✨ Done!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('Script failed:', error)
    process.exit(1)
  })