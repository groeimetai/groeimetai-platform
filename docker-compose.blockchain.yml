version: '3.8'

services:
  # Local Hardhat blockchain node
  hardhat-node:
    image: node:18-alpine
    container_name: groeimetai-hardhat-node
    working_dir: /app
    volumes:
      - ./:/app
      - hardhat-data:/app/.hardhat
    ports:
      - "8545:8545"  # JSON-RPC endpoint
    environment:
      - NODE_ENV=development
    command: npx hardhat node --hostname 0.0.0.0
    networks:
      - blockchain-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8545"]
      interval: 10s
      timeout: 5s
      retries: 5

  # IPFS node for local development
  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: groeimetai-ipfs
    volumes:
      - ipfs-data:/data/ipfs
      - ./ipfs-staging:/export
      - ./ipfs-data:/data/ipfs
    ports:
      - "4001:4001"    # Swarm
      - "5001:5001"    # API
      - "8080:8080"    # Gateway
    environment:
      - IPFS_PROFILE=server
      - IPFS_PATH=/data/ipfs
    networks:
      - blockchain-network
    command: daemon --migrate=true --enable-namesys-pubsub

  # Blockscout explorer for local blockchain
  blockscout:
    image: blockscout/blockscout:latest
    container_name: groeimetai-blockscout
    depends_on:
      - postgres
      - hardhat-node
    environment:
      - DATABASE_URL=postgresql://blockscout:blockscout@postgres:5432/blockscout
      - ETHEREUM_JSONRPC_VARIANT=geth
      - ETHEREUM_JSONRPC_HTTP_URL=http://hardhat-node:8545
      - ETHEREUM_JSONRPC_WS_URL=ws://hardhat-node:8545
      - NETWORK=Hardhat
      - SUBNETWORK=Local
      - COIN=MATIC
      - PORT=4000
      - SECRET_KEY_BASE=VTIB3uHDNbvrY0+60ZWgUoUBKDn9ppLR8MI4CpRz4/qLyEFs54ktJfaNT6Z221No
      - DISABLE_EXCHANGE_RATES=true
      - POOL_SIZE=10
      - POOL_SIZE_API=10
      - ECTO_USE_SSL=false
      - HEART_BEAT_TIMEOUT=30
      - INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER=true
    ports:
      - "4000:4000"
    networks:
      - blockchain-network
    command: sh -c "mix do ecto.create, ecto.migrate && mix phx.server"

  # PostgreSQL for Blockscout
  postgres:
    image: postgres:14-alpine
    container_name: groeimetai-postgres
    environment:
      - POSTGRES_USER=blockscout
      - POSTGRES_PASSWORD=blockscout
      - POSTGRES_DB=blockscout
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - blockchain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blockscout"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: groeimetai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - blockchain-network
    command: redis-server --appendonly yes

  # Contract deployment service
  contract-deployer:
    image: node:18-alpine
    container_name: groeimetai-contract-deployer
    depends_on:
      hardhat-node:
        condition: service_healthy
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      - NETWORK=hardhat
      - DEPLOY_ON_START=true
    networks:
      - blockchain-network
    command: >
      sh -c "
        echo 'Waiting for Hardhat node to be ready...' &&
        sleep 10 &&
        echo 'Deploying contracts...' &&
        npx hardhat run scripts/deploy-certificate-registry.js --network localhost &&
        echo 'Contracts deployed successfully!' &&
        tail -f /dev/null
      "

  # Development tools container
  blockchain-tools:
    image: node:18-alpine
    container_name: groeimetai-blockchain-tools
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      - NODE_ENV=development
    networks:
      - blockchain-network
    command: tail -f /dev/null
    tty: true

networks:
  blockchain-network:
    driver: bridge

volumes:
  hardhat-data:
  ipfs-data:
  postgres-data:
  redis-data:

# Usage Instructions:
# 
# 1. Start all services:
#    docker-compose -f docker-compose.blockchain.yml up -d
#
# 2. View logs:
#    docker-compose -f docker-compose.blockchain.yml logs -f
#
# 3. Deploy contracts:
#    docker-compose -f docker-compose.blockchain.yml exec blockchain-tools npm run deploy:local
#
# 4. Access services:
#    - Hardhat JSON-RPC: http://localhost:8545
#    - IPFS API: http://localhost:5001
#    - IPFS Gateway: http://localhost:8080
#    - Blockscout Explorer: http://localhost:4000
#
# 5. Run contract tests:
#    docker-compose -f docker-compose.blockchain.yml exec blockchain-tools npm test
#
# 6. Access Hardhat console:
#    docker-compose -f docker-compose.blockchain.yml exec blockchain-tools npx hardhat console --network localhost
#
# 7. Clean up:
#    docker-compose -f docker-compose.blockchain.yml down -v